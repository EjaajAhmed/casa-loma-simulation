/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package casa.loma.game;
import java.util.Random;
import java.util.Scanner;
import java.lang.String;
import java.sql.Connection;
import java.sql.PreparedStatement;

public class CasaLomaGame {

    public static Room[] rooms;
    public static NPCs[] npcs;

    private static void initializeRooms() {
        // Create and initialize rooms
        Room ClockIn = new Room("Clock In", "Where you start and end your shift.", 0, new int[]{1, 9});
        Room SecurityHallway = new Room("Security Hallway", "Where security resides.", 1, new int[]{0, 2, 4});
        Room Kitchen = new Room("Kitchen", "Where chefs work.", 2, new int[]{1, 3});
        Room IceRoom = new Room("Ice Room", "Where the servers set up.", 3, new int[]{2, 4});
        Room PeacockAlley = new Room("Peacock Alley", "Hallway connecting various rooms.", 4, new int[]{1, 3, 5, 6, 7});
        Room Conservatory = new Room("Conservatory", "A cool white room filled with plants.", 5, new int[]{4, 6});
        Room Library = new Room("Library", "A room filled with old books.", 6, new int[]{4, 5, 7, 8});
        Room GreatHall = new Room("Great Hall", "The main guest entrance.", 7, new int[]{4, 6, 8, 9});
        Room Terrace = new Room("Terrace", "A large balcony overseeing the gardens.", 8, new int[]{6, 7});
        Room FrontOfCastle = new Room("Front of Castle", "The courtyard at the front.", 9, new int[]{0, 8});

        rooms = new Room[]{ClockIn, SecurityHallway, Kitchen, IceRoom, PeacockAlley, Conservatory, Library, GreatHall, Terrace, FrontOfCastle};
    }

    private static void saveNPCsToDatabase(NPCs[] npcs) {
        String query = "INSERT INTO NPCs (name, loi, randomJobs, randomLines) VALUES (?, ?, ?, ?)";
        try (Connection conn = SQLDatabaseManager.getConnection();
        PreparedStatement pstmt = conn.prepareStatement(query)) {

            for (NPCs npc : npcs) {
                // Combines all jobs and lines into a single string to store
                String allJobs = String.join(", ", npc.getRandomJobs());
                String allLines = String.join(", ", npc.getRandomLines());

                pstmt.setString(1, npc.getName());
                pstmt.setDouble(2, npc.getLoi());
                pstmt.setString(3, allJobs);
                pstmt.setString(4, allLines);
                pstmt.executeUpdate();
            }

            System.out.println("NPCs have been saved to the database successfully.");
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("Failed to save NPCs to the database.");
    }
}

    
    // Method to Create and Initialize NPCs
    private static void initializeNPCs(){
        //Instances of NPCs
        NPCs Alejandro = new NPCs("Alejandro"); //Porter Manager
        NPCs Bob = new NPCs("Bob"); //Maintenence Manager 
        NPCs Becky = new NPCs("Becky"); //Guest Service Worker
        NPCs Preet = new NPCs("Preet"); //Security Worker
        npcs = new NPCs[] {Alejandro, Bob, Becky, Preet};

        //Setting Lines and Jobs of each NPC
        Alejandro.setJobs("I need 5 chairs to the library. Yesterday!");
        Alejandro.setJobs("What you standing around for? Get me some water bottles. Leave them in the conservatory!");
        Alejandro.setJobs("Move the gelato cart, Front of castle, please!");
        Bob.setJobs("What bus you wating for? You just standing here! Help us move the fountain!");
        Bob.setJobs("Who are you? Whatever bring me the master keys from security.");
        Bob.setJobs("Here change the lightbulb in the peacock alley. What do you mean not part of your job description?");
        Becky.setJobs("Umm, could you, like, get me a chair please? I need it in the great hall. Thanks sis!");
        Becky.setJobs("Apple watermelon is my favourite flavour and I lost it! Can you find my vape? I dropped it in the ");
        Becky.setJobs("Hey, the umbrella on the terrace flew away and hit a woman. It's giving Diddy. Can you fix it?");
        Preet.setJobs("Brother, can you put high top table by entrance, please brother. Thank you.");
        Preet.setJobs("Hey bro give me one table please. Library, brother.");
        Preet.setJobs("Bro I need help outside. The big pot needs move, brother.");

        Alejandro.setLines("How are you doing, sir!");
        Alejandro.setLines("Move!");
        Alejandro.setLines("¡Mira a este pequeño!");
        Bob.setLines("What bus you wating for? Cuz your just standing there!");
        Bob.setLines("A dollar a day keeps HR away! (Old man laugh)");
        Bob.setLines("Working hard or hardly working?");
        Becky.setLines("oh my gawd have you seen my vape? can I hit urs then? You DON'T have one...");
        Becky.setLines("SZA just dropped an album!!!");
        Becky.setLines("OMG I luv ur pants. its giving will smith in pursuit of happiness");
        Preet.setLines("How you, brotha? I'm good.");
        Preet.setLines("Bro, I have nephew, he need job. You guys hiring? Let me know.");
        Preet.setLines("Hot day today, you guys drink water.");

        //Setting likelyhood of interaction (loi)
        Alejandro.setLoi(0.5);
        Bob.setLoi(0.7);
        Becky.setLoi(0.25);
        Preet.setLoi(0.4);

        // Save NPCs to the database
        saveNPCsToDatabase(npcs);
        DatabaseInitializer.initializeDatabase("path/to/initialize_npcs.sql");

    }

    public static NPCs[] getNPCsArray() {
        return npcs;
    }

    private static void startGame(){
        //Initialize Game with Base Variables
        //game over clause boolean gameOver = false; 
        String text = "";
        int roomNum = 0; //clock in
        //clock
        int hour = 8;
        int minute = 0;

        //User Input
        Scanner sc = new Scanner(System.in);

        System.out.println("Welcome to Casa Loma! You are about to clock in.");
        double i = 0.0;
        int num = -1;
        while(i < 8.0){

            text = sc.nextLine();
            //Checking user's input to see how to respond
            if(text.length() == 1){ // checks if user input is a room number or passing time or an action
                num = Integer.parseInt(text); //changes player input to int
            }
            //Pass time feature
            if(text.equalsIgnoreCase("pass time")){
                if(minute == 0){
                    minute = 30;
                    i += 0.5;
                    System.out.println("The time is " + hour + ":" + minute);
                }else{
                    minute = 0;
                    hour += 1;
                    i += 0.5;
                    System.out.println("The time is " + hour + ":00");
                }
                // Calls Room Class methods to spawn NPC chances
                rooms[roomNum].spawnNPCs();
                interactWithNPCsInRoom(roomNum);
                continue;
            }
            //Moving rooms feature
            if (num == roomNum) { //checks if user is already in room
                System.out.println("You are already in this room. Would you like to pass time?");
                continue;

            } else { //checks if user chose a neigbouring room
                boolean isNeighbor = false;
                for (int neighbor : rooms[roomNum].getNeighbor()) {
                    if (num == neighbor) {
                        isNeighbor = true;
                        break;
                    }
                }
            
                if (isNeighbor) { 
                    roomNum = num; // Update the current room number
                    rooms[roomNum].spawnNPCs(); // Spawn NPCs
                    System.out.println("You have moved to the " + rooms[roomNum].getRoomName() + ". Would you like to pass time?");  
                    interactWithNPCsInRoom(roomNum); // Check for NPC interactions
                    continue; 
                } else {
                    System.out.println("You're not beside that room. Look at the legend and the map to navigate to other rooms.");
                    continue;
                }
            }
            //NPC chance for interaction/mission (cannot have interaction + mission in one go)
            /*if(){

            }*/

        }
        
        System.out.println("Bob: Headin' home now? Make sure to come to work at 4:00 AM tomorow!");
        System.out.println("Day off? What that?");
        sc.close();
    }
    
    private static void interactWithNPCsInRoom(int roomNum) {
        Random random = new Random();
         // Room currentRoom = rooms[roomNum];
        double totalLoi = 0.0;

        if (npcs.length == 0) {
            System.out.println("There are no NPCs in this room right now.");
            return;
        }

        for (NPCs npc : npcs) {
            totalLoi += npc.getLoi(); // Calculate total LOI for all room NPCs
        }

        double randomValue = random.nextDouble() * totalLoi; // Random value within the range of total LOI
        double cumulativeLoi = 0.0;

        for (NPCs npc : npcs) {
            cumulativeLoi += npc.getLoi();
            if (randomValue <= cumulativeLoi) {
                // Decide whether the NPC gives a job or a line
                if (random.nextBoolean()) {
                    System.out.println(npc.getName() + " has a task for you: " + npc.getRandomJobs());
                } else {
                    System.out.println(npc.getName() + " says: " + npc.getRandomLines());
                }
                return; // Exit after interacting with one NPC
            }
        }
    }

    public static void main(String args[]){
        initializeRooms();
        initializeNPCs();
        startGame();
    }

}

